const API_URL = "http://localhost:5000/talks"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
export const API_KEY = process.env.REACT_APP_DID_API_KEY || "";
export const OPENAI_KEY = process.env.REACT_APP_OPENAI_API_KEY || "";

if (!API_KEY || !OPENAI_KEY) {
  console.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API-–∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.");
}

console.log("D-ID API KEY:", API_KEY);
console.log("OpenAI API KEY:", OPENAI_KEY);

/**
 * üèÜ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
 */
export const createTalkingAvatar = async (image, audio, setLoading, setVideoUrl) => {
  if (!API_KEY) {
    alert("–û—à–∏–±–∫–∞: API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  if (!image || !audio) {
    alert("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª!");
    return;
  }

  setLoading(true);

  const requestData = {
    source_url: image,
    audio_url: audio,
    driver_url: "bank://lively",
  };

  try {
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ D-ID —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...");

    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${API_KEY}`,
      },
      body: JSON.stringify(requestData),
    });

    const result = await response.json();
    setLoading(false);

    if (result.id) {
      const videoUrl = `http://localhost:5000/talks/${result.id}`;
      console.log("‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ:", videoUrl);
      setVideoUrl(videoUrl);
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:", result);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ.");
    }
  } catch (error) {
    setLoading(false);
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
  }
};

/**
 * üî• –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏ (OpenAI TTS) —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
 */
let lastRequestTime = 0;

export const generateSpeech = async (text, setSpeechUrl) => {
  if (!text) {
    alert("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏!");
    return;
  }

  const now = Date.now();
  if (now - lastRequestTime < 5000) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ 5 —Å–µ–∫—É–Ω–¥
    alert("‚è≥ –ü–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.");
    return;
  }
  lastRequestTime = now;

  try {
    console.log("üì§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏...");

    const response = await fetch("https://api.openai.com/v1/audio/speech", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "tts-1",
        input: text,
        voice: "alloy",
      }),
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: ${response.status}`);
    }

    const data = await response.json();
    setSpeechUrl(data.audio_url);
    console.log("‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ:", data.audio_url);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏.");
  }
};

/**
 * üé¨ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
 */
export const generateSubtitles = async (text, setSubtitles) => {
  if (!text) {
    alert("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤!");
    return;
  }

  try {
    console.log("üìú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤...");

    const subtitles = text.split(". ").map((sentence, index) => ({
      start: index * 2,
      end: (index + 1) * 2,
      text: sentence,
    }));

    setSubtitles(subtitles);
    console.log("‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:", subtitles);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤.");
  }
};

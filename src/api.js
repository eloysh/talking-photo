const API_URL = "https://api.d-id.com/talks";
const API_KEY = process.env.REACT_APP_DID_API_KEY; // –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á

/**
 * üèÜ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
 * @param {string} image - URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} audio - URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
 * @param {Function} setLoading - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {Function} setVideoUrl - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
 */
export const createTalkingAvatar = async (image, audio, setLoading, setVideoUrl) => {
  if (!image || !audio) {
    alert("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª!");
    return;
  }

  setLoading(true);

  const requestData = {
    source_url: image, // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    audio_url: audio, // URL –∞—É–¥–∏–æ
    driver_url: "bank://lively", // –ê–Ω–∏–º–∞—Ü–∏—è –ª–∏—Ü–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
  };

  try {
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ D-ID...");

    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${API_KEY}`
      },
      body: JSON.stringify(requestData)
    });

    const result = await response.json();
    setLoading(false);

    if (result.id) {
      const videoUrl = `https://api.d-id.com/talks/${result.id}`;
      console.log("‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ:", videoUrl);
      setVideoUrl(videoUrl);
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:", result);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ.");
    }
  } catch (error) {
    setLoading(false);
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
  }
};

/**
 * üî• –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
 * @param {string} text - –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
 * @param {Function} setSpeechUrl - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
 */
export const generateSpeech = async (text, setSpeechUrl) => {
  if (!text) {
    alert("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏!");
    return;
  }

  try {
    console.log("üì§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏...");

    const response = await fetch("https://api.openai.com/v1/audio/speech", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`, // OpenAI API Key
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "tts-1", // –ù–æ–≤—ã–π TTS –¥–≤–∏–∂–æ–∫
        input: text,
        voice: "alloy" // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å
      }),
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏");
    }

    const data = await response.json();
    setSpeechUrl(data.audio_url);
    console.log("‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ:", data.audio_url);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏.");
  }
};






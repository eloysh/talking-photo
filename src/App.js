import React, { useState, useRef, useEffect } from "react";
import * as facemesh from "@tensorflow-models/facemesh"; // –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–∞
import { motion } from "framer-motion"; // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
import { Button } from "./components/ui/button"; // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞
import { Card, CardContent } from "./components/ui/card"; // –ö–∞—Ä—Ç–æ—á–∫–∏
import { createTalkingAvatar, generateSpeech } from "./api"; // API —Ñ—É–Ω–∫—Ü–∏–∏
import * as tf from "@tensorflow/tfjs";

export default function App() {
  tf.setBackend("webgl")
    .then(() => console.log("‚úÖ TensorFlow.js backend set to WebGL"))
    .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ backend:", err));

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [image, setImage] = useState(null); // –•—Ä–∞–Ω–∏—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const [audio, setAudio] = useState(null); // –•—Ä–∞–Ω–∏—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
  const [text, setText] = useState(""); // –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç
  const [loading, setLoading] = useState(false); // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
  const [videoUrl, setVideoUrl] = useState(null); // URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
  const [speechUrl, setSpeechUrl] = useState(null); // URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ

  // –°—Å—ã–ª–∫–∏ –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
  const imageRef = useRef(null);
  const canvasRef = useRef(null);
  const audioRef = useRef(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å FaceMesh –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    async function loadModel() {
      try {
        await facemesh.load();
        console.log("‚úÖ –ú–æ–¥–µ–ª—å FaceMesh –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:", error);
      }
    }
    loadModel();
  }, []);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –µ–≥–æ –ø–æ–¥ —ç–∫—Ä–∞–Ω
  const processImage = () => {
    if (!imageRef.current) return;
    const img = imageRef.current;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const maxWidth = window.innerWidth * 0.8;
    const maxHeight = window.innerHeight * 0.5;

    let newWidth = img.naturalWidth;
    let newHeight = img.naturalHeight;

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    if (newWidth > maxWidth) {
      const scale = maxWidth / newWidth;
      newWidth *= scale;
      newHeight *= scale;
    }
    if (newHeight > maxHeight) {
      const scale = maxHeight / newHeight;
      newWidth *= scale;
      newHeight *= scale;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –∏ —Ä–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    canvas.width = newWidth;
    canvas.height = newHeight;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
  };

  return (
    <div className="min-h-screen flex flex-col items-center bg-gray-500 text-white p-1">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <motion.h1 className="text-3xl font-bold mb-4" animate={{ scale: 1.1 }}>
        Talking Photo AI
      </motion.h1>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <Card className="p-4 mb-4 w-full max-w-[800px]">
        <CardContent className="flex flex-col items-center">
          <input
            type="file"
            accept="image/*"
            onChange={(e) => setImage(URL.createObjectURL(e.target.files[0]))}
            className="w-full"
          />
          {image && (
            <div className="relative flex justify-center w-full mt-2">
              <img
                ref={imageRef}
                src={image}
                onLoad={processImage}
                alt="Uploaded"
                className="uploaded-image"
              />
            </div>
          )}
        </CardContent>
      </Card>

      <canvas ref={canvasRef} style={{ display: "none" }} />

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ */}
      <Card className="p-4 mb-4 w-full max-w-[800px]">
        <CardContent>
          <input
            type="file"
            accept="audio/*"
            onChange={(e) => setAudio(URL.createObjectURL(e.target.files[0]))}
            className="w-full"
          />
          {audio && <audio ref={audioRef} controls src={audio} className="mt-2 w-full" />}
        </CardContent>
      </Card>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ */}
      <input
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        className="mt-4 p-2 w-full max-w-[800px] rounded bg-gray-800 border border-gray-700"
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏"
      />

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="flex flex-wrap gap-4 justify-center w-full max-w-[800px] mt-4">
        <Button
          className="bg-green-500 hover:bg-green-600 w-full"
          onClick={() => generateSpeech(text, setSpeechUrl)}
          disabled={!text}
        >
          üó£Ô∏è –ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
        </Button>

        <Button
          className="bg-blue-500 hover:bg-blue-600 w-full"
          onClick={() => createTalkingAvatar(image, audio || speechUrl, setLoading, setVideoUrl)}
          disabled={loading || !image}
        >
          {loading ? "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "üé• –°–æ–∑–¥–∞—Ç—å AI-–≤–∏–¥–µ–æ"}
        </Button>
      </div>

      {/* –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ */}
      {speechUrl && (
        <audio controls className="mt-4 w-full max-w-[800px]">
          <source src={speechUrl} type="audio/mp3" />
        </audio>
      )}

      {/* –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–∑–¥–∞–Ω–æ */}
      {videoUrl && (
        <div className="mt-4 w-full max-w-[800px]">
          <h2 className="text-xl mb-2">–í–∞—à–µ AI-–≤–∏–¥–µ–æ:</h2>
          <video controls className="w-full">
            <source src={videoUrl} type="video/mp4" />
          </video>
        </div>
      )}
    </div>
  );
}
